// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

RWStructuredBuffer<float2> pivots;

float resolution;

float bias = 0.1;

// direct translation of C# version of Sign (see below)
float Sign(float2 p1, float2 p2, float2 p3) {
    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);
}

// direct translation of C# version of inTriangle (see below)
bool InTriangle(float2 p, float2 a, float2 b, float2 c) {
    float d1, d2, d3;
    float has_neg, has_pos;

    float3 d = float3(Sign(p, a, b), Sign(p, b, c), Sign(p, c, a));

    d = (d - bias) * (1 + 2 * bias);

    d = saturate(d); // convert to boolean, first clamp01 (removing all negatives) and then ceiling (move all 0 < val < 1 up)

    // good ol de-morgan, !(has_neg && has_pos) = !hasNeg || !hasPos
    // !hasNeg means all of them are nonzero, this is intrinsic to HLSL
    // !hasPos means all of them are zero, this is slightly convoluted with the flipping but still fine
    return all(d) || !any(d);
}

// Edge distance references SpatialMappingWireframe.shader from: Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt)
// which, in turn, references: http://developer.download.nvidia.com/SDK/10/direct3d/Source/SolidWireframe/Doc/SolidWireframe.pdf
float EdgeDist(float2 p, float2 a, float2 b) {
    /**
    * from the original comments...:
    *   To find the distance to the opposite edge, we take the
    *   formula for finding the area of a triangle Area = Base/2 * Height,
    *   and solve for the Height = (Area * 2)/Base.
    *   We can get the area of a triangle by taking its cross product
    *   divided by 2.  However we can avoid dividing our area/base by 2
    *   since our cross product will already be double our area.
    */

    float2 e1 = a - p;
    float2 e2 = b - p;

    float areaDoubled = (e1.x * e2.y) - (e2.x * e1.y);

    return abs(areaDoubled / distance(b, a));
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 p = float2((id.x + 0.5) / resolution, (id.y + 0.5) / resolution);

    if (p.x < 1/resolution || (1 - p.x) < 1/resolution) {
        Result[id.xy] = 0;
        return;
    }

    for (uint i = 0; i < 24; i += 3) {
        Result[id.xy] = InTriangle(p, pivots[i], pivots[i + 1], pivots[i + 2]);
        if (InTriangle(p, pivots[i], pivots[i + 1], pivots[i + 2])) {
            Result[id.xy] = float4(
                min(min(EdgeDist(p, pivots[i + 2], pivots[i + 1]),
                EdgeDist(p, pivots[i + 2], pivots[i + 0])),
                EdgeDist(p, pivots[i + 1], pivots[i + 0])),

                min(distance(p, pivots[i]), min(distance(p, pivots[i + 2]), distance(p, pivots[i + 1]))),

                0,

                0
                
                );
            return;
        }
    }
}


/*
 * https://stackoverflow.com/questions/2049582/how-to-determine-if-a-point-is-in-a-2d-triangle
    static float Sign(Vector2 p1, Vector2 p2, Vector2 p3)
    {
        return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);
    }

    static bool PointInTriangle(Vector2 pt, Vector2 v1, Vector2 v2, Vector2 v3)
    {
        float d1, d2, d3;
        bool has_neg, has_pos;

        d1 = Sign(pt, v1, v2);
        d2 = Sign(pt, v2, v3);
        d3 = Sign(pt, v3, v1);

        has_neg = (d1 < 0) || (d2 < 0) || (d3 < 0);
        has_pos = (d1 > 0) || (d2 > 0) || (d3 > 0);

        return !(has_neg && has_pos);
    }
*/